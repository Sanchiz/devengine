<?php
/**
 * @file
 * Code for the devengine_core feature.
 */

include_once 'devengine_core.features.inc';

/**
 * Implements hook_menu().
 */
function devengine_core_menu() {
  $items = array();

  $items['admin/config/devengine'] = array(
    'title' => 'Devengine',
    'description' => 'Dev Engine',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/devengine/settings'] = array(
    'title' => 'Devengine settings',
    'description' => 'Dev Engine settings',
    'file' => 'devengine_core.admin.inc',
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devengine_core_main_settings'),
  );
  $items['projects/%node/new-issue'] = array(
    'title' => 'New issue',
    'title callback' => 'devengine_core_new_issue_title_callback',
    'title arguments' => array(1),
    'access arguments' => array('create issue content'),
    'page callback' => 'devengine_core_new_issue_callback',
    'page arguments' => array(1),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function devengine_core_preprocess_page(&$variables) {
  if (variable_get('devengine_core_logged_access', TRUE) && user_is_anonymous() && arg(0) != 'user') {
    drupal_goto('user');
  }
}

/**
 * Implements hook_block_info().
 */
function devengine_core_block_info() {
  $blocks['devengine_core_project_menu'] = array(
    'info' => t('Devengine core: Project menu'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function devengine_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'devengine_core_project_menu':
      $block['subject'] = t('Project menu');
      $block['content'] = devengine_core_project_menu_markup();
      break;

  }

  return $block;
}

/**
 * Markup for devengine_core_project_menu.
 */
function devengine_core_project_menu_markup() {
  // @TODO need a way to add links via UI.
  $nid = arg(1);
  $node = FALSE;
  $build_menu = FALSE;
  if (!empty($nid) && is_numeric($nid) && (arg(0) == 'node' || arg(0) == 'projects')) {
    $node_arg = node_load($nid);
    if (!empty($node_arg->type) && $node_arg->type == 'project') {
      $build_menu = TRUE;
      $node = $node_arg;
    }

    if (!empty($node_arg->type) && $node_arg->type == 'book') {
      if (!empty($node_arg->book['bid'])) {
        $wiki_config = devengine_wiki_load_book_config($node_arg->book['bid']);
        if (!empty($wiki_config['project_id'])) {
          $node = node_load($wiki_config['project_id']);
          $build_menu = TRUE;
        }
      }
    }

    if (!empty($node_arg->type) && $node_arg->type == 'issue') {
      if (!empty($node_arg->field_issue_project[LANGUAGE_NONE][0]['target_id'])) {
        $node = node_load($node_arg->field_issue_project[LANGUAGE_NONE][0]['target_id']);
        $build_menu = TRUE;
      }
    }
  }

  if ($build_menu && $node) {
    $items = array();
    $items[] = l(t('Issues'), 'projects/' . $node->nid . '/issues');
    $items[] = l(t('New issue'), 'projects/' . $node->nid . '/new-issue');
    // @TODO latest activity.
    //$items[] = l(t('Latest Activity'), 'projects/' . $node->nid . '/activity');

    // Add wiki link.
    if (module_exists('devengine_wiki')) {
      $items[] = l(t('Wiki'), 'projects/' . $node->nid . '/wiki');
    }

    // Add repository link.
    if (module_exists('devengine_environment')) {
      $items[] = l(t('Repository'), 'projects/' . $node->nid . '/environment');
    }
    return theme('item_list', array('items' => $items));
  }
  return FALSE;
}

/**
 * Title callback for new issue page.
 */
function devengine_core_new_issue_title_callback($project) {

}

/**
 * Page callback for new issue page.
 */
function devengine_core_new_issue_callback($project) {
  global $user;
  $type = 'issue';
  $form_id = $type . '_node_form';
  $node = new stdClass();
  $node->uid = $user->uid;
  $node->type = $type;
  $node->language = LANGUAGE_NONE;

  // Set project from context.
  $node->field_issue_project[LANGUAGE_NONE][0]['target_id'] = $project->nid;
  node_object_prepare($node);
  $form = drupal_get_form($form_id, $node);
  $form['field_issue_project']['#access'] = FALSE;

  // @TODO node author.
  return render($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function devengine_core_form_comment_node_issue_form_alter(&$form, $form_state) {
  // Hide visible fields on the comment form in order to "remove" it. We can't
  // actually obliterate the form entirely because of $form_state assumptions.
  $form['comment_body']['#access'] = FALSE;
  $form['actions']['#access'] = FALSE;
  $form['author']['#access'] = FALSE;

  // Add a property to the issue to tell if we're in an embedded form or not.
  $issue = $form['#node'];
  $issue->embed_issue_form = TRUE;
  $content = !empty($issue->content) ? $issue->content : FALSE;
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  // Render the issue edit form in place of the comment form.
  $issue_form = drupal_get_form('issue_node_form', $issue);
  $form['#suffix'] = render($issue_form);

  if (!empty($content)) {
    $issue->content = $content;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function devengine_core_form_issue_node_form_alter(&$form, $form_state) {
  if (!empty($form['#node']->embed_issue_form)) {
    $issue = $form['#node'];
    $form['options']['status']['#value'] = 1;
    $form['additional_settings']['#access'] = FALSE;
    $form['body']['#access'] = FALSE;
    $form['field_issue_files'][$issue->language]['#collapsible'] = TRUE;
    $form['field_issue_files'][$issue->language]['#collapsed'] = TRUE;
    $form['field_issue_files'][$issue->language]['#process'][] = 'form_process_fieldset';
    $form['field_issue_files'][$issue->language]['#title'] = t('Files');

    $form['#groups']['group_issue_matadata']->format_settings['formatter'] = 'collapsed';

    $form['comment_body'] = array(
      '#type' => 'text_format',
      '#title' => t('Comment'),
      '#format' => 'filtered_html',
      '#weight' => 0,
    );

    $form['actions']['delete']['#access'] = FALSE;
    $form['actions']['preview_changes']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['#submit'][] = 'devengine_core_issue_comment_form_submit';
  }
}

/**
 * Submit callback for comment form.
 */
function devengine_core_issue_comment_form_submit(&$form, &$form_state) {
  // Add comment.
  global $user;
  $node = $form_state['node'];

  // Always generate comment.
  $comment = array(
    'nid' => $node->nid,
    'cid' => 0,
    'pid' => 0,
    'uid' => $user->uid,
    'mail' => $user->mail,
    'is_anonymous' => 0,
    'homepage' => '',
    'subject' => '',
    'status' => COMMENT_PUBLISHED,
    'language' => LANGUAGE_NONE,
  );
  $comment['comment_body'] = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $form_state['values']['comment_body']['value'],
        'format' => $form_state['values']['comment_body']['format'],
      ),
    ),
  );
  $comment = (object) $comment;
  comment_submit($comment);
  comment_save($comment);

  // @TODO clear messages.
}

/**
 * Implements hook_token_info().
 */
function devengine_core_token_info() {
  $tokens['project_id'] = array(
    'name' => t('Project id'),
    'description' => t('project if of issue and wiki page.'),
  );
  return array(
    'tokens' => array('node' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function devengine_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      if ($name == 'project_id') {
        $project_id = FALSE;
        if ($node->type == 'issue' && !empty($node->field_issue_project[LANGUAGE_NONE][0]['target_id'])) {
          $project_id = $node->field_issue_project[LANGUAGE_NONE][0]['target_id'];
        }
        if ($node->type == 'book' && !empty($node->book['bid'])) {
          $wiki_config = devengine_wiki_load_book_config($node->book['bid']);
          if (!empty($wiki_config['project_id'])) {
            $project_id = $wiki_config['project_id'];
          }

        }
        $replacements[$original] = $project_id;
      }
    }
  }
  return $replacements;
}
