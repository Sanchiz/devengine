<?php
/**
 * @file
 * Code for the Devengine environment feature.
 */

include_once 'devengine_environment.features.inc';
/**
 * @file
 * Provides different environments for projects.
 */

/**
 * Implements hook_menu().
 */
function devengine_environment_menu() {
  $items = array();

  $items['projects/%node/environment'] = array(
    'title' => 'Environments',
    'access callback' => 'devengine_environment_access_callback',
    'access arguments' => array(1),
    'page callback' => 'devengine_environment_project_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['projects/%node/environment/settings'] = array(
    'title' => 'Environments',
    'access callback' => 'devengine_environment_access_callback',
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devengine_environment_repository_settings', 1),
    'type' => MENU_CALLBACK,
  );

  $items['projects/%node/environment/%/pull'] = array(
    'title' => 'Pull code',
    'access callback' => 'devengine_environment_access_callback',
    'access arguments' => array(1),
    'page callback' => 'devengine_environment_pull_code',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function devengine_environment_block_info() {
  $blocks = array();

  $blocks['de_development'] = array(
    'info' => t('Devengine environment: development'),
  );

  $blocks['de_staging'] = array(
    'info' => t('Devengine environment: staging'),
  );

  $blocks['de_production'] = array(
    'info' => t('Devengine environment: production'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function devengine_environment_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'de_development':
      $block['subject'] = t('Development');
      $block['content'] = devengine_environment_git_log('development');
      break;

    case 'de_staging':
      $block['subject'] = t('Staging');
      $block['content'] = devengine_environment_git_log('staging');
      break;

    case 'de_production':
      $block['subject'] = t('Production');
      $block['content'] = devengine_environment_git_log('production');
      break;

  }

  return $block;
}

/**
 * Access callback for environments page.
 */
function devengine_environment_access_callback($node) {
  if ($node->type == 'project') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Callback for environments page.
 */
function devengine_environment_project_page($node) {
  $dev_config = devengine_environment_load_config($node->nid, 'development');
  if (empty($dev_config)) {
    drupal_set_message(t('Please !link the repository for this project.', array('!link' => l(t('configure'), 'projects/' . $node->nid . '/environment/settings'))), 'warning');
  }
  return '';
}

/**
 * Repository settings form.
 */
function devengine_environment_repository_settings($form, &$form_state, $node) {
  $config = devengine_environment_load_config($node->nid);
  $form['development_environment'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Development environment'),
    '#description' => t('Path to your git repository for development environment'),
    '#default_value' => !empty($config['development']->repository) ? $config['development']->repository : '',
  );
  $form['staging_environment'] = array(
    '#type' => 'textfield',
    '#title' => t('Staging environment'),
    '#description' => t('Path to your git repository for staging environment'),
    '#default_value' => !empty($config['staging']->repository) ? $config['staging']->repository : '',
  );
  $form['production_environment'] = array(
    '#type' => 'textfield',
    '#title' => t('Production environment'),
    '#description' => t('Path to your git repository for production environment'),
    '#default_value' => !empty($config['production']->repository) ? $config['production']->repository : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Submit callback for repository settings form.
 */
function devengine_environment_repository_settings_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  if (!empty($form_state['values']['development_environment'])) {
    devengine_environment_update_config($node->nid, 'development', $form_state['values']['development_environment']);
  }
  if (!empty($form_state['values']['staging_environment'])) {
    devengine_environment_update_config($node->nid, 'staging', $form_state['values']['staging_environment']);
  }
  if (!empty($form_state['values']['production_environment'])) {
    devengine_environment_update_config($node->nid, 'production', $form_state['values']['production_environment']);
  }
  $form_state['redirect'] = 'projects/' . $node->nid . '/environment';
}

/**
 * Update/Insert record in devengine_environment table.
 */
function devengine_environment_update_config($project_id, $type, $repository) {
  db_merge('devengine_environment')
    ->key(array('project_id' => $project_id, 'type' => $type))
    ->fields(
      array(
        'project_id' => $project_id,
        'type' => $type,
        'repository' => $repository,
      )
    )
    ->execute();
}

/**
 * Load config for environment.
 */
function devengine_environment_load_config($project_id, $type = FALSE) {
  $query = db_select('devengine_environment', 'e');
  $query->fields('e');
  $query->condition('e.project_id', $project_id);

  // Filter by environment type.
  if (!empty($type)) {
    $query->condition('e.type', $type);
  }

  if (!empty($type)) {
    $config = $query->execute()->fetchObject();
  }
  else {
    $config = $query->execute()->fetchAllAssoc('type');
  }
  return $config;
}

/**
 * Remove environment config.
 */
function devengine_environment_remove_config($project_id) {
  db_delete('devengine_environment')
    ->condition('project_id', $project_id)
    ->execute();
}

/**
 * Return git log markup.
 */
function devengine_environment_git_log($type) {
  $node = menu_get_object('node');
  if ($node && $node->type == 'project') {
    $config = devengine_environment_load_config($node->nid, $type);
    if (!empty($config)) {
      $output = '';
      if (realpath($config->repository)) {
        if ($type == 'staging') {
          $output .= l(t('Pull code from development'), 'projects/' . $node->nid . '/environment/' . $type . '/pull');
        }
        if ($type == 'production') {
          $output .= l(t('Pull code from staging'), 'projects/' . $node->nid . '/environment/' . $type . '/pull');
        }
        module_load_include('inc', 'gb');
        $output .= gb_summary('admin/srm', $config->repository . '/.git');
      }
      else {
        $output .= '<p>' . t("Set up your local directory.") . '</p>';
        $output .= '<p>' . t("Set up Git on your machine if you haven't already.") . '</p>';
        $output .= '<pre>';
        $output .= '<span>' . t('mkdir @repository', array('@repository' => $config->repository)) . '</span>';
        $output .= '<span>' . t('cd @repository', array('@repository' => $config->repository)) . '</span>';
        $output .= '<span>' . t('git init') . '</span>';
        $output .= '</pre>';
      }
      return $output;
    }
  }
  return FALSE;
}

/**
 * Page callback for pull code page.
 */
function devengine_environment_pull_code($node, $type) {
  $query = array();
  if ($type == 'staging') {
    devengine_environment_pull_code_for_environment($node, $type);
    $query = array('query' => array('qt-environments' => '1'), 'fragment' => 'qt-environments');
  }

  if ($type == 'production') {
    devengine_environment_pull_code_for_environment($node, $type);
    $query = array('query' => array('qt-environments' => '2'), 'fragment' => 'qt-environments');
  }
  drupal_goto('projects/' . $node->nid . '/environment', $query);
}

/**
 * Run git pull for environment.
 */
function devengine_environment_pull_code_for_environment($node, $type) {
  $config = devengine_environment_load_config($node->nid, $type);
  devengine_environment_git_pull($config->repository);
}

/**
 * Helper which do git pull.
 */
function devengine_environment_git_pull($repository) {
  $output = '';
  $git_cmd = variable_get('git_cmd', '/usr/bin/git');
  $cmd = 'cd ' . realpath($repository);
  $cmd .= ' && ' . $git_cmd . ' pull 2>&1 origin master';
  exec($cmd, $output, $ret);
  foreach ($output as $message) {
    drupal_set_message($message);
  }
}
